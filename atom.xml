<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Dashing的技术博客]]></title>
  <subtitle><![CDATA[心中有猛虎]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dashingpro.com//"/>
  <updated>2015-07-09T18:09:05.000Z</updated>
  <id>http://dashingpro.com//</id>
  
  <author>
    <name><![CDATA[DashingPro]]></name>
    <email><![CDATA[luyu12138@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[第一篇测试]]></title>
    <link href="http://dashingpro.com/2015/07/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95/"/>
    <id>http://dashingpro.com/2015/07/10/第一篇测试/</id>
    <published>2015-07-09T16:15:18.000Z</published>
    <updated>2015-07-09T18:09:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><h4 id="四级标题">四级标题</h4><h5 id="五级标题">五级标题</h5><h6 id="六级标题">六级标题</h6><h2 id="有序列表">有序列表</h2><ul>
<li>文本1</li>
<li>文本2</li>
<li>文本3</li>
</ul>
<h2 id="无需列表">无需列表</h2><ol>
<li>文本1</li>
<li>文本2</li>
<li>文本3</li>
</ol>
<h2 id="链接">链接</h2><p><a href="http://jianshu.io" target="_blank" rel="external">简书</a></p>
<h2 id="图片">图片</h2><p><img src="http://fanyi.baidu.com/static/i18n/zh/widget/translate/head/logo/logo_16ea8bb7.png" alt=""></p>
<h2 id="引用用&gt;号开头">引用用&gt;号开头</h2><blockquote>
<p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p>
</blockquote>
<h2 id="多行引用就用多个大于号">多行引用就用多个大于号</h2><blockquote>
<p>锄禾日当午<br>汗滴禾下土<br>谁知盘中餐<br>粒粒皆辛苦</p>
</blockquote>
<h2 id="一个*或者_包围的表示斜体">一个*或者_包围的表示斜体</h2><p><em>你好</em>    <em>你好</em></p>
<h2 id="两个*或者_包围的表示粗体">两个*或者_包围的表示粗体</h2><p><strong>你好</strong>    <strong>你好</strong></p>
<h2 id="表格_但是不知道里面的冒号是干什么用的">表格 但是不知道里面的冒号是干什么用的</h2><table>
<thead>
<tr>
<th>Tables</th>
<th>Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td>right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td>centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td>are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h2 id="粘贴一段代码玩一玩">粘贴一段代码玩一玩</h2><pre><code>func sizeHeightWithText(labelText: <span class="built_in">NSString</span>, fontSize: <span class="built_in">CGFloat</span>, textAttributes: [<span class="built_in">NSObject</span> : AnyObject]) -&gt; <span class="built_in">CGRect</span> {
    <span class="keyword">return</span> labelText<span class="variable">.boundingRectWithSize</span>(<span class="built_in">CGSize</span>(width: fontSize, height: <span class="number">480</span>), options: <span class="built_in">NSStringDrawingOptions</span><span class="variable">.UsesLineFragmentOrigin</span>, attributes: textAttributes, context: <span class="literal">nil</span>)
}



class DiaryLabel : <span class="built_in">UILabel</span> {

    var textAttributes : [<span class="built_in">NSObject</span> : AnyObject]!

    convenience init(fontName: String, labelText: String, fontSize: <span class="built_in">CGFloat</span>, lineHeight: <span class="built_in">CGFloat</span>) {
        <span class="keyword">self</span><span class="variable">.init</span>(frame: <span class="built_in">CGRectZero</span>)

        let font = <span class="built_in">UIFont</span>(name: fontName, size: fontSize) as <span class="built_in">UIFont</span>!

        var paragraphStyle = <span class="built_in">NSMutableParagraphStyle</span>()
        paragraphStyle<span class="variable">.lineSpacing</span> = lineHeight

        textAttributes = [<span class="built_in">NSFontAttributeName</span> : font, <span class="built_in">NSParagraphStyleAttributeName</span> : paragraphStyle]

        var labelSize = sizeHeightWithText(labelText, fontSize, textAttributes)

        <span class="keyword">self</span><span class="variable">.frame</span> = <span class="built_in">CGRect</span>(origin: <span class="built_in">CGPointZero</span>, size: labelSize<span class="variable">.size</span>)

        <span class="keyword">self</span><span class="variable">.attributedText</span> = <span class="built_in">NSAttributedString</span>(string: labelText, attributes: textAttributes)

        <span class="keyword">self</span><span class="variable">.lineBreakMode</span> = <span class="built_in">NSLineBreakMode</span><span class="variable">.ByCharWrapping</span>

        <span class="keyword">self</span><span class="variable">.numberOfLines</span> = <span class="number">0</span>

    }

    func resizeLabelWithFontName(fonsName: String, labelText: String, fontSize: <span class="built_in">CGFloat</span>, lineHeight: <span class="built_in">CGFloat</span>) {
        let font = <span class="built_in">UIFont</span>(name: fonsName, size: fontSize) as <span class="built_in">UIFont</span>!

        var paragraphStyle = <span class="built_in">NSMutableParagraphStyle</span>()
        paragraphStyle<span class="variable">.lineSpacing</span> = lineHeight

        textAttributes = [<span class="built_in">NSFontAttributeName</span> : font, <span class="built_in">NSForegroundColorAttributeName</span> : <span class="built_in">UIColor</span><span class="variable">.blackColor</span>(), <span class="built_in">NSParagraphStyleAttributeName</span> : paragraphStyle]

        var labelSize = sizeHeightWithText(labelText, fontSize, textAttributes)

        <span class="keyword">self</span><span class="variable">.frame</span> = <span class="built_in">CGRect</span>(origin: <span class="built_in">CGPointZero</span>, size: labelSize<span class="variable">.size</span>)

        <span class="keyword">self</span><span class="variable">.attributedText</span> = <span class="built_in">NSAttributedString</span>(string: labelText, attributes: textAttributes)

        <span class="keyword">self</span><span class="variable">.lineBreakMode</span> = <span class="built_in">NSLineBreakMode</span><span class="variable">.ByCharWrapping</span>

        <span class="keyword">self</span><span class="variable">.numberOfLines</span> = <span class="number">0</span>
    }

    func updateText(labelText: String) {
        var labelSize = sizeHeightWithText(labelText, <span class="keyword">self</span><span class="variable">.font</span><span class="variable">.pointSize</span>, textAttributes)

        <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.size</span> = labelSize<span class="variable">.size</span>

        <span class="keyword">self</span><span class="variable">.attributedText</span> = <span class="built_in">NSAttributedString</span>(string: labelText, attributes: textAttributes)

    }

    func updateLabelColor(color: <span class="built_in">UIColor</span>) {
        textAttributes[<span class="built_in">NSForegroundColorAttributeName</span>] = color

        <span class="keyword">self</span><span class="variable">.attributedText</span> = <span class="built_in">NSAttributedString</span>(string: <span class="keyword">self</span><span class="variable">.attributedText</span><span class="variable">.string</span>, attributes: textAttributes)
    }

}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><h4 id="四级标题">四级标题</h4><h5 id="五级标题">五级标题</h5><h6 id="六级标题">六级标题</h6><h]]>
    </summary>
    
  </entry>
  
</feed>